@page "/requiredtest"

<h3>Required Test</h3>

@using Blazor.AppTest.Common;
@using Blazor.AppTest.Data
@using System.ComponentModel;

<EditForm Model="@requriedCheckModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group row">
        <label for="Name" class="col-sm-2 col-form-label">
            Name
        </label>
        <div class="col-sm-10">
            <InputText id="Name" class="form-control" placeholder="Name"
                       @bind-Value="requriedCheckModel.Name" />
            <ValidationMessage For="@(() => requriedCheckModel.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Age" class="col-sm-2 col-form-label">
            Age
        </label>
        <div class="col-sm-10">
            <InputNumber id="Age" class="form-control" placeholder="Age"
                         @bind-Value="requriedCheckModel.Age" />
            <ValidationMessage For="@(() => requriedCheckModel.Age)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Introduction" class="col-sm-2 col-form-label">
            Introduction
        </label>
        <div class="col-sm-10">
            <InputText id="Introduction" class="form-control" placeholder="Introduction"
                         @bind-Value="requriedCheckModel.Introduction" />
            <ValidationMessage For="@(() => requriedCheckModel.Introduction)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="gender" class="col-sm-2 col-form-label">
            Gender
        </label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="requriedCheckModel.Gender" class="form-control">
                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                {
                    <option value="@gender">@gender</option>
                }
            </InputSelect>
        </div>
    </div>

    <br /><br />

    <button type="submit">Submit</button>

</EditForm>

@code {

    private RequriedCheckModel requriedCheckModel = new();

    protected override void OnInitialized()
    {
        PropertyDescriptor? descriptor = TypeDescriptor.GetProperties(requriedCheckModel.GetType())["Introduction"];

        if (descriptor != null)
        {
            ChangeableRequired? attribute = (ChangeableRequired?)descriptor.Attributes[typeof(ChangeableRequired)];
            if (attribute != null)
            {
                attribute.Disabled = true;
            }
        }

        base.OnInitialized();
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit");
    }
}
